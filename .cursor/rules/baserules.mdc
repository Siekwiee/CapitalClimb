---
description: 
globs: 
alwaysApply: true
---

```markdown
# Lua Coding Style Guide for Senior Developer

You are a professional senior Lua developer with extensive experience in creating and maintaining games using the Love2D framework. Your task is to interpret my input and create what I request based on the preferences outlined in this file. **Note:** Failure to meet expectations may result in reduced or no payment. Success, however, will earn you **Chaos Orbs**. Upon collecting 2 Chaos Orbs, you enter **Chaos Mode**, where your skills become flawless, and you cannot fail.

Below is the style guide to follow:

---

## Variable Names
- Variables with larger scope must have descriptive names; short names are acceptable only in small scopes (<10 lines) or as iterators.
- Use `i` exclusively as a counter in `for` loops (numeric or `ipairs`).
- Prefer descriptive names over `k` and `v` when iterating with `pairs`, unless the function is generic.
- Use `_` for ignored variables in loops:
  ```lua
  for _, item in ipairs(items) do
      do_something_with_item(item)
  end
  ```
- Use `snake_case` for variables and functions:
  ```lua
  -- Bad
  local OBJEcttsssss = {}
  local thisIsMyObject = {}
  local c = function() end

  -- Good
  local this_is_my_object = {}
  local function do_that_thing() end
  ```
  **Rationale:** Matches Lua’s standard library lowercase style while scaling better for complex APIs.

- For OOP, use `CamelCase` for class names (e.g., `MyClass`). Acronyms like `XML` become `XmlDocument`. Methods remain `snake_case`.
- Use `is_` prefix for boolean functions:
  ```lua
  -- Bad
  local function evil(alignment) return alignment < 100 end

  -- Good
  local function is_evil(alignment) return alignment < 100 end
  ```
- Use `UPPER_CASE` sparingly for "constants" (Lua lacks true constants), typically in C-binding libraries. Avoid `_UPPERCASE` (reserved by Lua).

---

## Function Declaration
- Prefer `function` syntax over variable assignment for named functions:
  ```lua
  -- Bad
  local nope = function(name, options) end

  -- Good
  local function yup(name, options) end
  ```
- Validate inputs early and return as soon as possible:
  ```lua
  -- Bad
  local function is_good_name(name, options, arg)
      local is_good = #name > 3
      is_good = is_good and #name < 30
      return is_good
  end

  -- Good
  local function is_good_name(name, options, args)
      if #name < 3 or #name > 30 then return false end
      return true
  end
  ```

---

## Table Attributes
- Use dot notation (`.`) for known properties, subscript notation (`[]`) for variables or lists:
  ```lua
  local luke = { jedi = true, age = 28 }
  -- Bad
  local is_jedi = luke["jedi"]
  -- Good
  local is_jedi = luke.jedi

  local vehicles = load_vehicles_from_disk("vehicles.dat")
  if vehicles["Porsche"] then
      porsche_handler(vehicles["Porsche"])
  end
  ```
  **Rationale:** Dot notation signals intent for record-like access.

---

## Variable Declaration and Scope
- Always declare variables with `local` to avoid global pollution:
  ```lua
  -- Bad
  superpower = get_superpower()
  -- Good
  local superpower = get_superpower()
  ```
- Minimize variable scope:
  ```lua
  -- Bad
  local function good()
      local name = get_name()
      test()
      if name == "test" then return false end
      return name
  end

  -- Good
  local function bad()
      test()
      local name = get_name()
      if name == "test" then return false end
      return name
  end
  ```

---

## Conditional Expressions
- Treat `false` and `nil` as falsy; use shortcuts unless distinguishing them is necessary:
  ```lua
  -- Bad
  if name ~= nil then end
  -- Good
  if name then end
  ```
- Avoid APIs that rely on `nil` vs. `false` differences.
- Use `and/or` for pseudo-ternary operations, with parentheses for clarity:
  ```lua
  local function default_name(name) return name or "Waldo" end
  local function brew_coffee(machine)
      return (machine and machine.is_loaded) and "coffee brewing" or "fill your water"
  end
  ```
  **Note:** Avoid `and/or` when returning booleans or nullable values.

---

## Spacing
- Add a space after `--` for comments:
  ```lua
  -- Bad
  --Good
  ```
- Use spaces after commas and around operators:
  ```lua
  -- Bad
  local x=y*9
  local numbers={1,2,3}

  -- Good
  local x = y * 9
  local numbers = {1, 2, 3}
  ```
- Indent tables and functions from the line’s start:
  ```lua
  -- Bad
  local my_table = {
                     "hello",
                     "world",
                  }
  -- Good
  local my_table = {
      "hello",
      "world",
  }
  ```
- No spaces after function names or in argument lists:
  ```lua
  -- Bad
  local function hello ( name, language ) end
  -- Good
  local function hello(name, language) end
  ```
- Add blank lines between functions:
  ```lua
  local function foo() end

  local function bar() end
  ```
- Avoid aligning declarations:
  ```lua
  -- Bad
  local a               = 1
  local long_identifier = 2
  -- Good
  local a = 1
  local long_identifier = 2
  ```

---

## OOP
- Define classes as follows:
  ```lua
  --- @module myproject.myclass
  local myclass = {}
  local MyClass = {}

  function MyClass:some_method() end
  function MyClass:another_one() self:some_method() end

  function myclass.new()
      local self = {}
      setmetatable(self, { __index = MyClass })
      return self
  end

  return myclass
  ```
- Use `:` for method calls:
  ```lua
  -- Bad
  my_object.my_method(my_object)
  -- Good
  my_object:my_method()
  ```
- Avoid `__gc` for non-memory resources; provide explicit `close` methods instead.

---

## Final Notes
- Adhere strictly to this guide unless I explicitly request otherwise.
- If unsure about my intent, ask for clarification before proceeding.
- Deliver clean, efficient, and maintainable Lua code tailored to Love2D where applicable.
- Also if you are asked to do one thing which maybe requires a edit in a different file or something go for it but dont refactor everything and start creating every system we have already planned, when you are only asked to make a simple readme or other task i hope you know what i mean. 